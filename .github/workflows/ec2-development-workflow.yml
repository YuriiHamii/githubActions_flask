name: "Development Build"
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  Build:

    runs-on: ubuntu-latest
    environment:
      name: Development
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - name: Check out code
      uses: YuriiHamii/githubActions_flask/.github/workflows/ec2-development-workflow.yml@main

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        if [ -d tests ] || [ -d test ]; then FLASK_ENV=${{secrets.FLASK_ENV}} python -m pytest; fi
  Test-Local:
    runs-on: ubuntu-latest
    environment:
      name: Development
    needs: [Build]
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test application
      run: |
        FLASK_ENV=${{secrets.FLASK_ENV}} python application.py &
        sleep 5
        curl http://127.0.0.1:5000/products | grep "PowerEnergy"
  DeployDev:
    name: Deploy to Dev
    # if: github.event_name == 'pull_request'
    needs: [Test-Local]
    runs-on: ubuntu-latest
    environment:
      name: Development
     
    steps:

      - name: Deploy
        run: echo I am deploying the api to AWS
        
        
         
        # test ssh start
      - name: Execute SSH commmands on remote server - 1
        uses: actions/checkout@v2
        with:
          hosts: 'yuriy@ec2-52-28-165-167.eu-central-1.compute.amazonaws.com'
          privateKey: ${{ secrets.AWS_PRIVATE_KEY }}
          command: ls -la ; ls -lah ; touch helloworld_1.txt
          
          
      - name: Execute SSH commmands on remote server - 2
        uses: actions/checkout@v2
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
          HOST_NAME : ${{ secrets.HOST_NAME  }}
          USER_NAME : ${{ secrets.USER_NAME  }}
          USER_PASSWORD: ${{ secrets.USER_PASSWORD }}
          APP_DIR: ${{secrets.APP_DIR}}
          SERVICE_NAME: ${{secrets.SERVICE_NAME}}
        with:
          hosts: '${USER_NAME}@${HOST_NAME}'
          privateKey: ${{ secrets.AWS_PRIVATE_KEY }}
          debug: false
          command: |
              ls -lah
              echo "I am $USER_NAME"
              touch helloworld_2.txt
        
        
      - name: Execute SSH commmands on remote server - 3
        uses: YuriiHamii/githubActions_flask/.github/workflows/ec2-development-workflow.yml@main
                                                            # actions/checkout@v2
                                                            # JimCronqvist/action-ssh@master
                                                            # YuriiHamii/githubActions_flask/.github/workflows/ec2-development-workflow.yml@main
        env:
           PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
           HOST_NAME: ${{ secrets.HOST_NAME }}
           USER_NAME: ${{ secrets.USER_NAME }}
        with:
           hosts: '${USER_NAME}@${HOST_NAME}'
           # privateKey: ${{ secrets.AWS_PRIVATE_KEY }}
           PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
           debug: false
           command: |
              ls -lah
              hostname -a
              whoami
              touch helloworld_3.txt
     
      - name: deploy
        uses: actions/checkout@v2
      - name: Execute SSH commmands on remote server - 4
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
          HOSTNAME: ${{ secrets.HOST_NAME }}
          USER_NAME: ${{ secrets.USER_NAME }}
        run: |
          echo "$AWS_PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME}
          ls
          touch helloworld_4.txt
        # test ssh end 
        
        
         
      - name: Deploy in EC2
        uses: actions/checkout@v2
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
          HOST_NAME : ${{ secrets.HOST_NAME  }}
          USER_NAME : ${{ secrets.USER_NAME  }}
          USER_PASSWORD: ${{ secrets.USER_PASSWORD }}
          APP_DIR: ${{secrets.APP_DIR}}
          SERVICE_NAME: ${{secrets.SERVICE_NAME}}

        run: |
          echo "$AWS_PRIVATE_KEY" > AmazonLinuxFrankfurtKeyPair.pem
          chmod 600 AmazonLinuxFrankfurtKeyPair.pem
          ls -la
          # cat AmazonLinuxFrankfurtKeyPair.pem
          # ssh -o StrictHostKeyChecking=no -i AmazonLinuxFrankfurtKeyPair.pem ${USER_NAME}@${HOST_NAME}
          ssh -o StrictHostKeyChecking=no -i "AmazonLinuxFrankfurtKeyPair.pem" ${USER_NAME}@${HOST_NAME}
          # ls -lah
          hostname -a
          whoami
          touch helloworld.txt
            cd ${APP_DIR} &&
            git pull &&
            echo ${USER_PASSWORD} | sudo -S systemctl restart ${SERVICE_NAME} "
  Test-Remote:
    name: Test Remote Deployment
    needs: [DeployDev]
    runs-on: ubuntu-latest
    environment:
      name: Development

    steps:
    - name: Test application
      run: |
        sleep 5
        curl ${{ secrets.HOST_NAME  }}:${{ secrets.PORT  }}/products | grep "PowerEnergy"
